name: Build

on:
  push:
    branches:
    - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
    - main

env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  build:
    name: Build & test
    runs-on: ubuntu-latest

    outputs:
      docker_image: ${{ steps.image.outputs.tag }}

    steps:
    - uses: actions/checkout@v1

    - name: Build
      run: dotnet build --configuration Release

    - name: Test
      run: dotnet test tests/DqtApi.Tests --configuration Release --no-build --logger trx
      env:
        IntegrationTests_CrmUrl: ${{ secrets.IntegrationTests_CrmUrl }}
        IntegrationTests_CrmClientId: ${{ secrets.IntegrationTests_CrmClientId }}
        IntegrationTests_CrmClientSecret: ${{ secrets.IntegrationTests_CrmClientSecret }}

    - name: Test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test results
        path: "**/*.trx"
        reporter: dotnet-trx

    - name: Publish
      run: dotnet publish --configuration Release --no-build src/DqtApi/DqtApi.csproj

    - name: Docker image tag
      id: image
      run: |
        echo ::set-output name=tag::$CONTAINER_REGISTRY/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]'):sha-$(echo $GITHUB_SHA | cut -c -7)

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker build & push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.image.outputs.tag }}

  validate_terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10

    - name: Check formatting
      run: terraform fmt -check
      working-directory: terraform

    - name: Validate
      run: |
        terraform init -backend=false
        terraform validate -no-color
      working-directory: terraform

    - name: Lint
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tflint_rulesets: azurerm
        working_directory: terraform

  deploy_dev:
    name: Deploy to dev environment
    needs: [build, validate_terraform]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_dev

    steps:
    - uses: actions/checkout@v1

    - uses: ./.github/workflows/actions/deploy-environment
      id: deploy
      with:
        environment_name: dev
        docker_image: ${{ needs.build.outputs.docker_image }}
        azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
        terraform_vars: dev.tfvars
        terraform_backend_vars: dev.backend.tfvars
