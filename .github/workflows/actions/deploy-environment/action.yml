name: Deploy PAAS environment

inputs:
  environment_name:
    description: 'The name of the environment'
    required: true
  docker_image:
    description: 'The Docker image to deploy to the environment'
    required: true
  azure_credentials:
    description: 'JSON object containing a service principal that can read from Azure Key Vault'
    required: true
  terraform_vars:
    description: 'Path to the tfvars file for the environment'
    required: true
  terraform_backend_vars:
    description: 'Path to the backend tfvars file for the environment'
    required: true

outputs:
  environment_url:
    description: 'The base URL for the deployed environment'
    value: ${{ steps.terraform.outputs.url }}
  test_user_api_key:
    description: 'An API key of a client for running tests'
    value: ${{ steps.get_secrets.outputs.TEST-API-KEY }}

runs:
  using: composite

  steps:
    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        PAAS_SPACE=$(jq -r '.paas_space' $TFVARS)

        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi

        if [ -z "$PAAS_SPACE" ]; then
          echo "::error ::Failed to extract paas_space from $TFVARS"
          exit 1
        fi

        echo ::set-output name=key_vault_name::$KEY_VAULT_NAME
        echo ::set-output name=paas_space::$PAAS_SPACE
      shell: bash
      env:
        TFVARS: ${{ inputs.terraform_vars }}
      working-directory: terraform

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    - uses: Azure/get-keyvault-secrets@v1
      id: get_secrets
      with:
        keyvault: ${{ steps.config.outputs.key_vault_name }}
        secrets: 'TFSTATE-CONTAINER-ACCESS-KEY,TEST-API-KEY,FUNCTIONAL-TESTS-CONFIG,PAAS-USER,PAAS-PASSWORD'

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10
        terraform_wrapper: false

    - name: Download migrations
      uses: actions/download-artifact@v2
      with:
        name: migrations
        path: migrations

    - uses: DFE-Digital/github-actions/setup-cf-cli@master
      with:
        CF_USERNAME: ${{ steps.get_secrets.outputs.PAAS-USER }}
        CF_PASSWORD: ${{ steps.get_secrets.outputs.PAAS-PASSWORD }}
        CF_SPACE_NAME: ${{ steps.config.outputs.paas_space }}
        INSTALL_CONDUIT: true

    - name: Terraform
      id: terraform
      run: |
        terraform init -backend-config=$BACKEND_TFVARS -input=false -no-color
        terraform apply -var-file=$TFVARS -var="migrations_file=$(realpath ../migrations/script.sql)" -auto-approve -input=false -no-color

        echo ::set-output name=url::https://$(terraform output -raw api_fqdn)/
      env:
        ARM_ACCESS_KEY: ${{ steps.get_secrets.outputs.TFSTATE-CONTAINER-ACCESS-KEY }}
        TFVARS: ${{ inputs.terraform_vars }}
        BACKEND_TFVARS: ${{ inputs.terraform_backend_vars }}
        TF_VAR_azure_sp_credentials_json: ${{ inputs.azure_credentials }}
        TF_VAR_api_docker_image: ${{ inputs.docker_image }}
      shell: bash
      working-directory: terraform

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Functional tests
      id: functional_tests
      run: |
        dotnet test tests/DqtApi.FunctionalTests --configuration Release --logger trx --settings tests/DqtApi.FunctionalTests/ci.runsettings || true
      env:
        FunctionalTestsConfig: ${{ steps.get_secrets.outputs.FUNCTIONAL-TESTS-CONFIG }}
        BaseUrl: ${{ steps.terraform.outputs.url }}
      shell: bash

    - name: Test report
      uses: dorny/test-reporter@v1
      if: steps.functional_tests.outcome != 'skipped'
      with:
        name: ${{ inputs.environment_name }} functional test results
        path: "**/*.trx"
        reporter: dotnet-trx
        fail-on-error: false
